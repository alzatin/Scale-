{
    "atomType": "Molecule",
    "name": "Scale ",
    "x": 0,
    "y": 0,
    "uniqueID": 1715882756760,
    "ioValues": [
        {
            "name": "scale",
            "ioValue": 10
        },
        {
            "name": "shape",
            "ioValue": 10
        }
    ],
    "topLevel": true,
    "allAtoms": [
        {
            "atomType": "Input",
            "name": "scale",
            "x": 0.013333333333333334,
            "y": 0.3730407523510972,
            "uniqueID": 1715884483060,
            "ioValues": []
        },
        {
            "atomType": "Input",
            "name": "shape",
            "x": 0.013333333333333334,
            "y": 0.5297805642633229,
            "uniqueID": 1715884474533,
            "ioValues": []
        },
        {
            "atomType": "Output",
            "name": "Output",
            "x": 0.98,
            "y": 0.5,
            "uniqueID": 1715884472474,
            "ioValues": [
                {
                    "name": "number or geometry",
                    "ioValue": 1718904196980
                }
            ]
        },
        {
            "atomType": "Code",
            "name": "Code",
            "x": 0.5610021786492375,
            "y": 0.4751552795031056,
            "uniqueID": 1718904196980,
            "ioValues": [
                {
                    "name": "shape",
                    "ioValue": 10
                },
                {
                    "name": "scale",
                    "ioValue": 10
                }
            ],
            "codeVersion": 1,
            "code": "//Inputs:[shape,scale];\n\n\nconst newPlane = new Plane().pivot(0, 'Y');\n\n return { geometry: [library[shape].geometry[0].clone().scale(scale)], tags: [],\n      color: '#A3CE5B',\n      plane: newPlane}\n\n\n    /**\n    To Use the Code Atom, enter your inputs to the input list a.e Inputs:[shape, height]\n    If your input is connected to another atom with a replicad geometry you can access its geometry by looking up its ID in your library. a.e library[Input1].geometry[0] \n    Use any replicad available methods to modify your geometry. Learn more about all of the available methods at \n    https://replicad.xyz/docs/introapp/UserGuide.html \n    Return a replicad object that includes geometry, color, tags and plane. \n\n\n    Example Code Atom:\n\n      Inputs:[shape, x];\n\n      let finalShape = library[shape].geometry[0].clone.translate[x,0,0]\n\n      return {geometry: finalShape, color: library[shape].color, plane: library[shape].plane, tags: library[shape].tags }\n\n      - See more examples at _______ \n\n\n    */\n"
        }
    ],
    "allConnectors": [
        {
            "ap1Name": "number or geometry",
            "ap2Name": "scale",
            "ap2Primary": false,
            "ap1ID": 1715884483060,
            "ap2ID": 1718904196980
        },
        {
            "ap1Name": "number or geometry",
            "ap2Name": "shape",
            "ap2Primary": false,
            "ap1ID": 1715884474533,
            "ap2ID": 1718904196980
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "number or geometry",
            "ap2Primary": false,
            "ap1ID": 1718904196980,
            "ap2ID": 1715884472474
        }
    ],
    "unitsIndex": 0,
    "fileTypeVersion": 1,
    "filetypeVersion": 1
}